{
    "contents" : "# construct normalized expression sets from list of CEL files \n# uses RMA from the oligo package\n\nlibrary(oligo)\nlibrary(hugene10sttranscriptcluster.db)\nlibrary(genefilter)\n\nrma_eset <- function(CEL_list){\n  \n  # take a list of .CEL files and make a normalized ExpressionSet object\n  cels <- read.celfiles(CEL_list)\n  \n  # build an expression set\n  eset <- oligo::rma(cels, target=\"core\")\n  \n  return(eset)\n}\n\n# download this file from http://www.affymetrix.com/support/technical/annotationfilesmain.affx\n#affy_annotation = \"../data/HuGene-1_0-st-v1.na35.hg19.transcript.csv\"\n\ngene_filter_eset <- function(eset, affy_annotation){\n  \n  # take an expression set and affy annotation file and filter:\n  # only genes with Entrez IDs\n  # one probe per gene (largest IQR)\n  \n  write(\"Annotating expression set with gene names and Entrez IDs.\", stderr())\n  \n  # annotate the expressionSet object\n  fData <- data.frame(ID = featureNames(eset))\n  rownames(fData) <- fData$ID\n  \n  # official Gene Name\n  ann <- mget(as.character(fData$ID), hugene10sttranscriptclusterSYMBOL, ifnotfound=NA)\n  ann <- lapply(ann, paste, collapse=\";\")\n  fData$Name <- unlist(ann)\n  \n  # Entrez ID\n  ann <- mget(as.character(rownames(fData)),hugene10sttranscriptclusterENTREZID, ifnotfound=NA)\n  ann <- lapply(ann, paste, collapse=\";\")\n  fData$EntrezID <- unlist(ann)\n  \n  # Chromosome\n  ann <- mget(as.character(rownames(fData)), hugene10sttranscriptclusterCHR, ifnotfound=NA)\n  ann <- lapply(ann, paste, collapse=\";\")\n  fData$Chromosome <- unlist(ann)\n  \n  # Long Gene Name\n  ann <- mget(as.character(rownames(fData)), hugene10sttranscriptclusterGENENAME, ifnotfound=NA)\n  ann <- lapply(ann, paste, collapse=\";\")\n  fData$LongName <- unlist(ann)\n  \n  # Affymetrix probe status annotation\n  affy.annot <- read.csv(affy_annotation, skip=21, header=T)\n  \n  write(\"Annotating probes with affy probe information.\", stderr())\n  rownames(affy.annot) <- affy.annot$transcript_cluster_id\n  fData$ProbeStatus <- factor(as.character(affy.annot[rownames(fData),\"category\"]))\n  metadata <- data.frame(labelDescription = c(\"Manufacturers ID\", \"Official Symbol\", \n                                              \"EntrezID\", \"Chromosome\", \"Gene Name\", \n                                              \"Affy Probe Status\"), row.names=c(\"ID\", \n                                                                                \"Name\", \"EntrezID\", \"Chromosome\", \"LongName\", \n                                                                                \"ProbeStatus\"))\n  \n  colnames(fData) <- c(\"ID\", \"Name\", \"EntrezID\", \"Chromosome\", \"LongName\", \"ProbeStatus\")\n  \n  features <- new(\"AnnotatedDataFrame\", data = fData, varMetadata = metadata)\n  \n  featureData(eset) <- features\n  \n  \n  write(\"Reducing eset to one probe per gene, only genes with annotated Entrez IDs.\", stderr())\n  \n  # one gene per probe, only probes that map to an entrezID\n  entrezIds <- mget(featureNames(eset), envir = hugene10sttranscriptclusterENTREZID, ifnotfound=NA)\n  haveEntrezId <- names(entrezIds)[sapply(entrezIds, function(x) !is.na(x))]\n  numNoEntrezId <- length(featureNames(eset)) - length(haveEntrezId) \n  \n  eset <- eset[haveEntrezId, ]\n  \n  # make sure each probe only maps to 1 entrezID\n  esIqr <- apply(exprs(eset), 1, IQR)\n  uniqGenes <- findLargest(featureNames(eset), esIqr, \"hugene10sttranscriptcluster\")\n  eset <- eset[uniqGenes, ]\n  numSelected <- length(featureNames(eset))\n  \n  # Now make gene symbol the featureName - makes more sense to work with\n  eset <- eset[fData(eset)$ProbeStatus == \"main\", ]\n  \n  # remove any duplicate gene names that have made it to here\n  eset <- eset[!duplicated(fData(eset)$Name),]\n  \n  featureNames(eset) <- fData(eset)$Name\n  \n  \n  return(eset)\n  \n}\n\nmatch_eset_probes <- function(discovery_eset, validation_eset) {\n  \n  # slices validation expression set to include only probes used in discovery set\n  \n  to_keep = match(fData(discovery_eset)$ID, featureNames(validation_eset))\n  validation_eset <- validation_eset[to_keep,]\n  featureNames(validation_eset) <- fData(discovery_eset)$Name\n  \n  metadata <- data.frame(labelDescription = c(\"Manufacturers ID\", \"Official Symbol\", \n                                              \"EntrezID\", \"Chromosome\", \"Gene Name\", \n                                              \"Affy Probe Status\"), row.names=c(\"ID\", \"Name\", \"EntrezID\", \"Chromosome\", \"LongName\",\"ProbeStatus\"))\n  \n  features <- new(\"AnnotatedDataFrame\", data = fData(discovery_eset), varMetadata = metadata)\n  featureData(validation_eset) <- features\n  \n  if (dim(discovery_eset)[1] != dim(validation_eset)[1]){\n    stop(\"Genes/probes in discovery set not equal to validation set. Check eset_tools::match_eset_probes for troubleshooting.\")\n  }\n  \n  return(validation_eset)\n  \n}",
    "created" : 1434991489065.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4081326952",
    "id" : "17D71FB6",
    "lastKnownWriteTime" : 1434991506,
    "path" : "~/code/wgcna_corr/R/eset_tools.R",
    "project_path" : "R/eset_tools.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}